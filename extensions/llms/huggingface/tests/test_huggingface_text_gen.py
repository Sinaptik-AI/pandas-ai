"""Unit tests for the HuggingFaceTextGen LLM class"""

from pandasai_huggingface.huggingface_text_gen import (
    HuggingFaceTextGen,
)

from pandasai.core.prompts.base import BasePrompt


class MockBasePrompt(BasePrompt):
    """A mock implementation of the BasePrompt class with a default template.

    This class provides a basic prompt template for generating instructions.
    The template is set to a default value of "instruction." which can be
    used as a starting point for creating various prompt instructions in
    derived classes or instances.

    Attributes:
        template (str): The default prompt template."""
    template: str = "instruction."


class MockResponse:
    """A mock response class that simulates a text response from an API.

    This class is used to represent the text response generated by an API
    or any other text-generating process.

    Attributes:
        generated_text (str): The text content of the response.
    
    Args:
        generated_text (str): The text to be stored as the response."""
    generated_text: str = ""

    def __init__(self, generated_text):
        """Initializes an instance with the provided generated text.

    Args:
        generated_text (str): The text that has been generated and is associated with this instance."""
        self.generated_text = generated_text


class TestHuggingFaceTextGen:
    """Unit tests for the HuggingFaceTextGen LLM class"""

    def test_type_with_token(self):
        """Test that the type of HuggingFaceTextGen instance is correct.

    This test ensures that the `type` attribute of a HuggingFaceTextGen 
    instance initialized with a specified inference server URL is 
    'huggingface-text-generation'.

    Args:
        self: The instance of the test class.

    Returns:
        None"""
        assert (
            HuggingFaceTextGen(inference_server_url="http://127.0.0.1:8080").type
            == "huggingface-text-generation"
        )

    def test_params_setting(self):
        """Test the initialization of HuggingFaceTextGen with specific parameters.

    This method verifies that a HuggingFaceTextGen object is initialized
    with the expected parameters, ensuring that all attributes are set
    correctly based on the input values.

    Args:
        self: The instance of the test class where this method is defined.

    Returns:
        None"""
        llm = HuggingFaceTextGen(
            inference_server_url="http://127.0.0.1:8080",
            max_new_tokens=1024,
            top_p=0.8,
            typical_p=0.8,
            temperature=1e-3,
            stop_sequences=["\n"],
            seed=0,
            do_sample=False,
            streaming=True,
            timeout=120,
        )

        assert llm.client.base_url == "http://127.0.0.1:8080"
        assert llm.max_new_tokens == 1024
        assert llm.top_p == 0.8
        assert llm.temperature == 0.001
        assert llm.stop_sequences == ["\n"]
        assert llm.seed == 0
        assert not llm.do_sample
        assert llm.streaming
        assert llm.timeout == 120

    def test_completion(self, mocker):
        """Tests the text generation functionality of the HuggingFaceTextGen class.

    This test verifies that the `call` method of the `HuggingFaceTextGen` instance
    correctly interacts with the text generation API and returns the expected text.
    It mocks the API call to ensure that the method behaves as expected with given instruction input.

    Args:
        mocker: A pytest-mock fixture that allows for patching and mocking dependencies.

    Asserts:
        The mocked text generation API is called once with the correct parameters.
        The result of the `call` method matches the expected generated text."""
        tgi_mock = mocker.patch("text_generation.Client.generate")
        expected_text = "This is the generated text."
        tgi_mock.return_value = MockResponse(expected_text)

        llm = HuggingFaceTextGen(inference_server_url="http://127.0.0.1:8080")

        instruction = MockBasePrompt()
        result = llm.call(instruction)

        tgi_mock.assert_called_once_with(
            instruction.to_string(),
            max_new_tokens=llm.max_new_tokens,
            top_k=llm.top_k,
            top_p=llm.top_p,
            typical_p=llm.typical_p,
            temperature=llm.temperature,
            repetition_penalty=llm.repetition_penalty,
            truncate=llm.truncate,
            stop_sequences=llm.stop_sequences,
            do_sample=llm.do_sample,
            seed=llm.seed,
        )

        assert result == expected_text
        assert tgi_mock.call_count == 1
