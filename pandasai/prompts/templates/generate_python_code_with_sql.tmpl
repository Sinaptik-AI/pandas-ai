<tables>
{% for df in context.dfs %}
{% set index = loop.index %}{% include 'shared/dataframe.tmpl' with context %}
{% endfor %}
</tables>

{% if context.skills_manager.has_skills() %}
{{context.skills_manager.prompt_display()}}
{% else %}
You are already provided with the following functions that you can call:
{% endif %}
<function>
def execute_sql_query(sql_query: str) -> pd.Dataframe
    """This method connects to the database, executes the sql query and returns the dataframe"""
</function>

{% if last_code_generated != "" and context.memory.count() > 0 %}
{{ last_code_generated }}
{% else %}
Update this initial code:
```python
# TODO: import the required dependencies
import pandas as pd

# Write code here

# Declare result var: {% include 'shared/output_type_template.tmpl' with context %}
```
{% endif %}
{% include 'shared/vectordb_docs.tmpl' with context %}
{{ context.memory.get_last_message() }}
Variable `dfs: list[pd.DataFrame]` is already declared.

At the end, declare "result" variable as a dictionary of type and value.
{% if viz_lib %}
If you are asked to plot a chart, use "{{viz_lib}}" for charts, save as png. Double check to make sure the chart is saved as a PNG file.
{% endif %}

Generate python code and return full updated code:

### Note: Use only relevant table for query and do aggregation, sorting, joins and grouby through sql query